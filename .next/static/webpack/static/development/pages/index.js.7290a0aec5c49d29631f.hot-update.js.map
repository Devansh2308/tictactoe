{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.7290a0aec5c49d29631f.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Square from \"./../components/square\";\r\nimport square from \"./../components/square\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      \"& > * + *\": {\r\n        marginTop: theme.spacing(2)\r\n      }\r\n    },\r\n    row: {\r\n      display: \"inline\",\r\n      float: \"left\"\r\n    }\r\n  })\r\n);\r\n\r\nfunction Game() {\r\n  const classes = useStyles();\r\n  const [squares, setsquares] = useState(Array(9).fill(null));\r\n  const [isXNext, setXNext] = useState(true);\r\n\r\n  function renderSquare(i: number) {\r\n    return (\r\n      <Square\r\n        onClick={() => {\r\n          if (squares[i] != null) {\r\n            return;\r\n          }\r\n          const nextSquares = squares.slice();\r\n          nextSquares[i] = isXNext ? \"X\" : \"O\";\r\n          setXNext(!isXNext);\r\n          setsquares(nextSquares);\r\n        }}\r\n        value={squares[i]}\r\n      ></Square>\r\n    );\r\n  }\r\n\r\n  function winner(squares) {\r\n    const winninglines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let j = 0; j < winninglines.length; j++) {\r\n      const [a, b, c] = winninglines[j];\r\n      if (squares[a] && squares[a] == squares[b] && squares[c] == squares[a]) {\r\n        return square[a];\r\n      } else return null;\r\n    }\r\n  }\r\n  function isBoardFull() {\r\n    for (let k = 0; k < squares.length; k++) {\r\n      if (squares[k] == null) return false;\r\n      else return true;\r\n    }\r\n  }\r\n  const Winner = winner(squares);\r\n\r\n  function getstatus() {\r\n    if (Winner) {\r\n      return \"winner is \" + Winner;\r\n    } else {\r\n      if (isBoardFull) {\r\n        return \"game is Draw\";\r\n      } else return \"next turn is\" + (isXNext ? \"X\" : \"O\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.row}>\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className={classes.row}>\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className={classes.row}>\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n\r\n      <Alert variant=\"filled\" severity=\"info\">\r\n        {getstatus()}\r\n      </Alert>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AAFA;AAPA;AADA;AACA;AAcA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}